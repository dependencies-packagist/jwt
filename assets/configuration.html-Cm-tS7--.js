import{_ as t,c as o,b as s,a as i,d as a,e as p,w as l,r as c,o as r}from"./app-D4OUOdcg.js";const u={};function d(k,n){const e=c("RouteLink");return r(),o("div",null,[n[5]||(n[5]=s("h1",{id:"configuration",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#configuration"},[s("span",null,"Configuration")])],-1)),n[6]||(n[6]=s("p",null,[a("In order to simplify the setup of the library, we provide the class "),s("code",null,"Token\\JWT\\Token"),a(".")],-1)),n[7]||(n[7]=s("p",null,"It's meant for:",-1)),s("ul",null,[n[2]||(n[2]=s("li",null,"Configuring the default algorithm (signer) and key(s) to be used",-1)),n[3]||(n[3]=s("li",null,"Configuring the default set of validation constraints",-1)),s("li",null,[n[1]||(n[1]=a("Providing custom implementation for the ")),p(e,{to:"/guides/extending-the-library.html"},{default:l(()=>n[0]||(n[0]=[a("extension points")])),_:1})]),n[4]||(n[4]=s("li",null,"Retrieving components (encoder, decoder, parser, validator, and builder)",-1))]),n[8]||(n[8]=i(`<p>In order to use it, you must:</p><ol><li>Initialise the configuration object</li><li>Customise the configuration object</li><li>Retrieve components</li></ol><h3 id="configuration-initialisation" tabindex="-1"><a class="header-anchor" href="#configuration-initialisation"><span>Configuration initialisation</span></a></h3><p>The <code>Token\\JWT\\Contracts\\Signer</code> object is used for symmetric/asymmetric signature.</p><p>To initialise it, you can pass the key content as a plain text:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Key</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$key</span> <span class="token operator">=</span> <span class="token class-name static-context">Key</span><span class="token operator">::</span><span class="token function">plainText</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;my-key-as-plaintext&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Provide a base64 encoded string:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Key</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$key</span> <span class="token operator">=</span> <span class="token class-name static-context">Key</span><span class="token operator">::</span><span class="token function">base64Encoded</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;YSB2ZXJ5IGxvbmcgYSB2ZXJ5IHVsdHJhIHNlY3VyZSBrZXkgZm9yIG15IGFtYXppbmcgdG9rZW5z&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Or provide a file path:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Key</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$key</span> <span class="token operator">=</span> <span class="token class-name static-context">Key</span><span class="token operator">::</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token constant">__DIR__</span> <span class="token operator">.</span> <span class="token string single-quoted-string">&#39;/path-to-my-key-stored-in-a-file.pem&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// this reads the file and keeps its contents in memory</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="for-symmetric-algorithms" tabindex="-1"><a class="header-anchor" href="#for-symmetric-algorithms"><span>For symmetric algorithms</span></a></h4><p>Symmetric algorithms use the same key for both signature creation and verification. This means that it&#39;s really important that your key <strong>remains secret</strong>.</p><blockquote><p>Tip It is recommended that you use a key with lots of entropy, preferably generated using a cryptographically secure pseudo-random number generator (CSPRNG). You can use the <a href="https://github.com/AndrewCarterUK/CryptoKey" target="_blank" rel="noopener noreferrer">CryptoKey</a> tool to do this for you.</p></blockquote><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Token</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Signature<span class="token punctuation">\\</span>Hmac<span class="token punctuation">\\</span>HS256</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Key</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$token</span> <span class="token operator">=</span> <span class="token class-name static-context">Token</span><span class="token operator">::</span><span class="token function">forSymmetricSigner</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token comment">// You may use any HMAC variations (256, 384, and 512)</span></span>
<span class="line">    <span class="token keyword">new</span> <span class="token class-name">HS256</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// replace the value below with a key of your own!</span></span>
<span class="line">    <span class="token class-name static-context">Key</span><span class="token operator">::</span><span class="token function">base64Encoded</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;mBC5v1sOKVvbdEitdSBenu59nfNfhwkedkJVNabosTw=&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// You may also override the JOSE encoder/decoder if needed by providing extra arguments here</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="for-asymmetric-algorithms" tabindex="-1"><a class="header-anchor" href="#for-asymmetric-algorithms"><span>For asymmetric algorithms</span></a></h4><p>Asymmetric algorithms use a <strong>private key</strong> for signature creation and a <strong>public key</strong> for verification. This means that it&#39;s fine to distribute your <strong>public key</strong>. However, the <strong>private key</strong> should <strong>remain secret</strong>.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Token</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Signature<span class="token punctuation">\\</span>Rsa<span class="token punctuation">\\</span>RS256</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Key</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$token</span> <span class="token operator">=</span> <span class="token class-name static-context">Token</span><span class="token operator">::</span><span class="token function">forAsymmetricSigner</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token comment">// You may use RSA or ECDSA and all their variations (256, 384, and 512)</span></span>
<span class="line">    <span class="token keyword">new</span> <span class="token class-name">RS256</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name static-context">Key</span><span class="token operator">::</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token constant">__DIR__</span> <span class="token operator">.</span> <span class="token string single-quoted-string">&#39;/my-private-key.pem&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name static-context">Key</span><span class="token operator">::</span><span class="token function">base64Encoded</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;mBC5v1sOKVvbdEitdSBenu59nfNfhwkedkJVNabosTw=&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// You may also override the JOSE encoder/decoder if needed by providing extra arguments here</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Important The implementation of ECDSA algorithms have a constructor dependency. Use the <code>create()</code> named constructor to avoid having to handle it (e.g.: <code>Token\\JWT\\Signature\\Ecdsa\\ES256::create()</code>).</p></blockquote><h4 id="for-no-algorithm" tabindex="-1"><a class="header-anchor" href="#for-no-algorithm"><span>For no algorithm</span></a></h4><blockquote><p>Warning This configuration type is <strong>NOT</strong> recommended for production environments. It&#39;s only provided to allow people to have a simpler and faster setup for tests, avoiding any kind of signature creation/verification.</p></blockquote><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Token</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$token</span> <span class="token operator">=</span> <span class="token class-name static-context">Token</span><span class="token operator">::</span><span class="token function">forUnsecuredSigner</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token comment">// You may also override the JOSE encoder/decoder if needed by providing extra arguments here</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="customisation" tabindex="-1"><a class="header-anchor" href="#customisation"><span>Customisation</span></a></h3><p>By using the setters of the <code>Token\\JWT\\Token</code> you may customise the setup of this library.</p><blockquote><p>Important If you want to use a customised configuration, please make sure you call the setters before of invoking any getter. Otherwise, the default implementations will be used.</p></blockquote><p>These are the available setters:</p><ul><li><code>Token\\JWT\\Token#setBuilderFactory()</code>: configures how the token builder should be created</li><li><code>Token\\JWT\\Token#setParser()</code>: configures a custom token parser</li><li><code>Token\\JWT\\Token#setValidator()</code>: configures a custom validator</li><li><code>Token\\JWT\\Token#setValidationConstraints()</code>: configures the default set of validation constraints</li></ul><h3 id="retrieve-components" tabindex="-1"><a class="header-anchor" href="#retrieve-components"><span>Retrieve components</span></a></h3><p>Once you&#39;ve made all the necessary configuration you can pass the configuration object around your code and use the getters to retrieve the components:</p><p>These are the available getters:</p><ul><li><code>Token\\JWT\\Token#builder()</code>: retrieves the token builder (always creating a new instance)</li><li><code>Token\\JWT\\Token#parser()</code>: retrieves the token parser</li><li><code>Token\\JWT\\Token#signer()</code>: retrieves the signer</li><li><code>Token\\JWT\\Token#signingKey()</code>: retrieves the key for signature creation</li><li><code>Token\\JWT\\Token#verificationKey()</code>: retrieves the key for signature verification</li><li><code>Token\\JWT\\Token#validator()</code>: retrieves the token validator</li><li><code>Token\\JWT\\Token#validationConstraints()</code>: retrieves the default set of validation constraints</li></ul>`,30))])}const v=t(u,[["render",d]]),g=JSON.parse('{"path":"/usage/configuration.html","title":"Configuration","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"Configuration initialisation","slug":"configuration-initialisation","link":"#configuration-initialisation","children":[]},{"level":3,"title":"Customisation","slug":"customisation","link":"#customisation","children":[]},{"level":3,"title":"Retrieve components","slug":"retrieve-components","link":"#retrieve-components","children":[]}],"git":{"updatedTime":1744720143000,"contributors":[{"name":"jundayw","username":"jundayw","email":"jundayw@126.com","commits":1,"url":"https://github.com/jundayw"}],"changelog":[{"hash":"91a3d6fc9010e5c1bda03335ef85a5b0a234ba4f","time":1744720143000,"email":"jundayw@126.com","author":"jundayw","message":"docs"}]},"filePathRelative":"usage/configuration.md"}');export{v as comp,g as data};
