import{_ as p,c as t,b as s,a as o,d as a,e as l,w as i,r as c,o as r}from"./app-B9Ka1KbF.js";const u={};function d(k,n){const e=c("RouteLink");return r(),t("div",null,[n[6]||(n[6]=s("h1",{id:"配置",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#配置"},[s("span",null,"配置")])],-1)),n[7]||(n[7]=s("p",null,[a("为了简化该库的配置，我们提供了 "),s("code",null,"Token\\JWT\\Token"),a(" 类。 该类主要用于以下用途：")],-1)),s("ul",null,[n[3]||(n[3]=s("li",null,"配置默认的签名算法（Signer）和密钥",-1)),n[4]||(n[4]=s("li",null,"配置默认的验证约束集合",-1)),s("li",null,[n[1]||(n[1]=a("提供自定义实现以扩展库的功能（参考：")),l(e,{to:"/zh/guides/extending-the-library.html"},{default:i(()=>n[0]||(n[0]=[a("扩展指南")])),_:1}),n[2]||(n[2]=a("）"))]),n[5]||(n[5]=s("li",null,"获取各个组件（编码器、解码器、解析器、验证器 和 构建器）",-1))]),n[8]||(n[8]=o(`<p>要使用它，你需要：</p><ol><li>初始化配置对象</li><li>自定义配置对象</li><li>获取所需组件</li></ol><h3 id="初始化配置对象" tabindex="-1"><a class="header-anchor" href="#初始化配置对象"><span>初始化配置对象</span></a></h3><p><code>Token\\JWT\\Contracts\\Signer</code> 是用于处理对称加密（如 HMAC）或非对称加密（如 RSA、ECDSA）签名的密钥对象。 你可以通过将密钥内容（如密钥字符串或私钥文件内容）以纯文本形式传入来完成初始化。</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Key</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$key</span> <span class="token operator">=</span> <span class="token class-name static-context">Key</span><span class="token operator">::</span><span class="token function">plainText</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;my-key-as-plaintext&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请提供一个使用 Base64 编码的字符串，作为密钥或令牌的一部分：</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Key</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$key</span> <span class="token operator">=</span> <span class="token class-name static-context">Key</span><span class="token operator">::</span><span class="token function">base64Encoded</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;YSB2ZXJ5IGxvbmcgYSB2ZXJ5IHVsdHJhIHNlY3VyZSBrZXkgZm9yIG15IGFtYXppbmcgdG9rZW5z&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或提供一个文件路径：</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Key</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$key</span> <span class="token operator">=</span> <span class="token class-name static-context">Key</span><span class="token operator">::</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token constant">__DIR__</span> <span class="token operator">.</span> <span class="token string single-quoted-string">&#39;/path-to-my-key-stored-in-a-file.pem&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// this reads the file and keeps its contents in memory</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="对称加密" tabindex="-1"><a class="header-anchor" href="#对称加密"><span>对称加密</span></a></h4><p>对称算法在生成签名和验证签名时使用相同的密钥。 因此，<strong>确保密钥保持机密性</strong> 是极其重要的安全要求。</p><blockquote><p>提示 建议你使用一个具有 <strong>高熵值</strong> 的密钥，最好通过 <strong>加密安全的伪随机数生成器（CSPRNG）</strong> 生成。 你可以使用工具 <a href="https://github.com/AndrewCarterUK/CryptoKey" target="_blank" rel="noopener noreferrer">CryptoKey</a> 来帮助你生成这样的密钥。</p></blockquote><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Token</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Signature<span class="token punctuation">\\</span>Hmac<span class="token punctuation">\\</span>HS256</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Key</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$token</span> <span class="token operator">=</span> <span class="token class-name static-context">Token</span><span class="token operator">::</span><span class="token function">forSymmetricSigner</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token comment">// You may use any HMAC variations (256, 384, and 512)</span></span>
<span class="line">    <span class="token keyword">new</span> <span class="token class-name">HS256</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// replace the value below with a key of your own!</span></span>
<span class="line">    <span class="token class-name static-context">Key</span><span class="token operator">::</span><span class="token function">base64Encoded</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;mBC5v1sOKVvbdEitdSBenu59nfNfhwkedkJVNabosTw=&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// You may also override the JOSE encoder/decoder if needed by providing extra arguments here</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="非对称加密" tabindex="-1"><a class="header-anchor" href="#非对称加密"><span>非对称加密</span></a></h4><p>非对称算法通过 <strong>私钥</strong> 生成签名，并通过 <strong>公钥</strong> 进行验证。 因此，<strong>公钥</strong> 可公开分发，而 <strong>私钥</strong> 必须保持机密，以保障安全性。</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Token</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Signature<span class="token punctuation">\\</span>Rsa<span class="token punctuation">\\</span>RS256</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Key</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$token</span> <span class="token operator">=</span> <span class="token class-name static-context">Token</span><span class="token operator">::</span><span class="token function">forAsymmetricSigner</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token comment">// You may use RSA or ECDSA and all their variations (256, 384, and 512)</span></span>
<span class="line">    <span class="token keyword">new</span> <span class="token class-name">RS256</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name static-context">Key</span><span class="token operator">::</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token constant">__DIR__</span> <span class="token operator">.</span> <span class="token string single-quoted-string">&#39;/my-private-key.pem&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name static-context">Key</span><span class="token operator">::</span><span class="token function">base64Encoded</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;mBC5v1sOKVvbdEitdSBenu59nfNfhwkedkJVNabosTw=&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// You may also override the JOSE encoder/decoder if needed by providing extra arguments here</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>重要提示 ECDSA 算法的实现具有构造函数依赖项。 为避免手动处理这些依赖，建议使用 <code>create()</code> 命名构造方法，例如：<code>Token\\JWT\\Signature\\Ecdsa\\ES256::create()</code>。</p></blockquote><h4 id="适用于未使用任何签名算法的情况-即-alg-none" tabindex="-1"><a class="header-anchor" href="#适用于未使用任何签名算法的情况-即-alg-none"><span>适用于未使用任何签名算法的情况（即 <code>alg: none</code>）</span></a></h4><blockquote><p>警告 这种配置类型 <strong>不建议</strong> 在生产环境中使用。 它仅提供给用户以便在测试时可以更简便、快速地设置，避免任何形式的签名创建/验证。</p></blockquote><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Token</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$token</span> <span class="token operator">=</span> <span class="token class-name static-context">Token</span><span class="token operator">::</span><span class="token function">forUnsecuredSigner</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token comment">// 如有需要你也可以通过提供额外的参数来重写 JOSE 编码器/解码器</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自定义配置对象" tabindex="-1"><a class="header-anchor" href="#自定义配置对象"><span>自定义配置对象</span></a></h3><p>通过使用 <code>Token\\JWT\\Token</code> 的设置方法，你可以自定义此库的配置。</p><blockquote><p>重要提示 如果你希望使用自定义配置，请确保在调用任何获取方法之前先调用设置方法。 否则，将使用默认的实现。</p></blockquote><p>以下是可用的设置方法：</p><ul><li><code>Token\\JWT\\Token#setBuilderFactory()</code>: 配置如何创建令牌构建器</li><li><code>Token\\JWT\\Token#setParser()</code>: 配置自定义的令牌解析器</li><li><code>Token\\JWT\\Token#setValidator()</code>: 配置自定义的验证器</li><li><code>Token\\JWT\\Token#setValidationConstraints()</code>: 配置默认的验证约束集合</li></ul><h3 id="获取所需组件" tabindex="-1"><a class="header-anchor" href="#获取所需组件"><span>获取所需组件</span></a></h3><p>一旦完成了所有必要的配置，你可以将配置对象传递到代码中，并使用获取方法来检索各个组件：</p><p>以下是可用的获取方法：</p><ul><li><code>Token\\JWT\\Token#builder()</code>: 检索令牌构建器（每次都会创建一个新的实例）</li><li><code>Token\\JWT\\Token#parser()</code>: 检索令牌解析器</li><li><code>Token\\JWT\\Token#signer()</code>: 检索签名器</li><li><code>Token\\JWT\\Token#signingKey()</code>: 检索签名创建的密钥</li><li><code>Token\\JWT\\Token#verificationKey()</code>: 检索签名验证的密钥</li><li><code>Token\\JWT\\Token#validator()</code>: 检索令牌验证器</li><li><code>Token\\JWT\\Token#validationConstraints()</code>: 检索默认的验证约束集合</li></ul>`,29))])}const v=p(u,[["render",d]]),g=JSON.parse('{"path":"/zh/usage/configuration.html","title":"配置","lang":"zh-CN","frontmatter":{},"headers":[{"level":3,"title":"初始化配置对象","slug":"初始化配置对象","link":"#初始化配置对象","children":[]},{"level":3,"title":"自定义配置对象","slug":"自定义配置对象","link":"#自定义配置对象","children":[]},{"level":3,"title":"获取所需组件","slug":"获取所需组件","link":"#获取所需组件","children":[]}],"git":{"updatedTime":1744720143000,"contributors":[{"name":"jundayw","username":"jundayw","email":"jundayw@126.com","commits":1,"url":"https://github.com/jundayw"}],"changelog":[{"hash":"91a3d6fc9010e5c1bda03335ef85a5b0a234ba4f","time":1744720143000,"email":"jundayw@126.com","author":"jundayw","message":"docs"}]},"filePathRelative":"zh/usage/configuration.md"}');export{v as comp,g as data};
