import{_ as i,c as o,a as p,b as l,d as s,e,w as t,r as c,o as r}from"./app-DtV7Qdmg.js";const u={};function d(k,n){const a=c("RouteLink");return r(),o("div",null,[n[19]||(n[19]=p(`<h1 id="extending-the-library" tabindex="-1"><a class="header-anchor" href="#extending-the-library"><span>Extending the library</span></a></h1><p>We&#39;ve designed a few extension points in this library. These should enable people to easily customise our core components if they want to.</p><h2 id="builder" tabindex="-1"><a class="header-anchor" href="#builder"><span>Builder</span></a></h2><p>The token builder defines a fluent interface for plain token creation.</p><p>To create your own builder of it you must implement the <code>Token\\JWT\\Contracts\\Builder</code> interface:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Builder</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">MyCustomTokenBuilder</span> <span class="token keyword">implements</span> <span class="token class-name">Builder</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// implement all methods</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6)),l("p",null,[n[1]||(n[1]=s("Then, register a custom factory in the ")),e(a,{to:"/usage/configuration.html"},{default:t(()=>n[0]||(n[0]=[s("Configuration")])),_:1}),n[2]||(n[2]=s(":"))]),n[20]||(n[20]=p(`<div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Builder</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>ClaimsFormatter</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Factory</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$factory</span><span class="token operator">-&gt;</span><span class="token function">setBuilderFactory</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">ClaimsFormatter</span> <span class="token variable">$formatter</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">Builder</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyCustomTokenBuilder</span><span class="token punctuation">(</span><span class="token variable">$formatter</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="claims-formatter" tabindex="-1"><a class="header-anchor" href="#claims-formatter"><span>Claims formatter</span></a></h2><p>By default, we provide formatters that:</p><ul><li>unify the audience claim, making sure we use strings when there&#39;s only one item in that claim</li><li>format date based claims using microseconds (float)</li></ul><p>You may customise and even create your own formatters:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>ClaimsFormatter</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>RegisteredClaims</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Factory</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">UnixTimestampDates</span> <span class="token keyword">implements</span> <span class="token class-name">ClaimsFormatter</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">formatClaims</span><span class="token punctuation">(</span><span class="token keyword type-hint">array</span> <span class="token variable">$claims</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name static-context">RegisteredClaims</span><span class="token operator">::</span><span class="token constant">DATE_CLAIMS</span> <span class="token keyword">as</span> <span class="token variable">$claim</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">array_key_exists</span><span class="token punctuation">(</span><span class="token variable">$claim</span><span class="token punctuation">,</span> <span class="token variable">$claims</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token function">assert</span><span class="token punctuation">(</span><span class="token variable">$claims</span><span class="token punctuation">[</span><span class="token variable">$claim</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">DateTimeImmutable</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token variable">$claims</span><span class="token punctuation">[</span><span class="token variable">$claim</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$claims</span><span class="token punctuation">[</span><span class="token variable">$claim</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token function">getTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token variable">$claims</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$factory</span><span class="token operator">-&gt;</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UnixTimestampDates</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The class <code>Token\\JWT\\Contracts\\ChainedFormatter</code> allows for users to combine multiple formatters.</p><h2 id="parser" tabindex="-1"><a class="header-anchor" href="#parser"><span>Parser</span></a></h2><p>The token parser defines how a JWT string should be converted into token objects.</p><p>To create your own parser of it you must implement the <code>Token\\JWT\\Parser</code> interface:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Parser</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">MyCustomTokenParser</span> <span class="token keyword">implements</span> <span class="token class-name">Parser</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// implement all methods</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11)),l("p",null,[n[4]||(n[4]=s("Then register an instance in the ")),e(a,{to:"/usage/configuration.html"},{default:t(()=>n[3]||(n[3]=[s("Configuration")])),_:1}),n[5]||(n[5]=s(":"))]),n[21]||(n[21]=p(`<div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Factory</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$factory</span><span class="token operator">-&gt;</span><span class="token function">setParser</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyCustomTokenParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="signer" tabindex="-1"><a class="header-anchor" href="#signer"><span>Signer</span></a></h2><p>The signer defines how to create and verify signatures.</p><p>To create your own signer of it you must implement the <code>Token\\JWT\\Contracts\\Signer</code> interface:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Signer</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">SignerForAVeryCustomizedAlgorithm</span> <span class="token keyword">implements</span> <span class="token class-name">Signer</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// implement all methods</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5)),l("p",null,[n[9]||(n[9]=s("Then pass an instance of it while creating an instance of the ")),e(a,{to:"/usage/configuration.html"},{default:t(()=>n[6]||(n[6]=[s("Configuration")])),_:1}),n[10]||(n[10]=s(", ")),e(a,{to:"/usage/issuing-tokens.html"},{default:t(()=>n[7]||(n[7]=[s("Issuing tokens")])),_:1}),n[11]||(n[11]=s(", or ")),e(a,{to:"/usage/validating-tokens.html"},{default:t(()=>n[8]||(n[8]=[s("Validating tokens")])),_:1}),n[12]||(n[12]=s("."))]),n[22]||(n[22]=p(`<h2 id="key" tabindex="-1"><a class="header-anchor" href="#key"><span>Key</span></a></h2><p>The key object is passed down to signers and provide the necessary information to create and verify signatures.</p><p>To create your own signer of it you must implement the <code>Token\\JWT\\Contracts\\Key</code> interface:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Key</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">KeyWithSomeMagicalProperties</span> <span class="token keyword">implements</span> <span class="token class-name">Key</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// implement all methods</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="validator" tabindex="-1"><a class="header-anchor" href="#validator"><span>Validator</span></a></h2><p>The token validator defines how to apply validation constraint to either validate or assert tokens.</p><p>To create your own validator of it you must implement the <code>Token\\JWT\\Contracts\\Validator</code> interface:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Validator</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">MyCustomTokenValidator</span> <span class="token keyword">implements</span> <span class="token class-name">Validator</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// implement all methods</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8)),l("p",null,[n[14]||(n[14]=s("Then register an instance in the ")),e(a,{to:"/usage/configuration.html"},{default:t(()=>n[13]||(n[13]=[s("Configuration")])),_:1}),n[15]||(n[15]=s(":"))]),n[23]||(n[23]=p(`<div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Factory</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$factory</span><span class="token operator">-&gt;</span><span class="token function">setValidator</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyCustomTokenValidator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="validation-constraints" tabindex="-1"><a class="header-anchor" href="#validation-constraints"><span>Validation constraints</span></a></h2><p>A validation constraint define how one or more claims/headers should be validated. Custom validation constraints are handy to provide advanced rules for the registered claims or to validate private claims.</p><p>To create your own implementation of constraint you must implement the <code>Token\\JWT\\Contracts\\Constraint</code> interface:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Token</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Constraint</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Exceptions<span class="token punctuation">\\</span>ConstraintViolationException</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">SubjectMustBeAValidUser</span> <span class="token keyword">implements</span> <span class="token class-name">Constraint</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">assert</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Token</span> <span class="token variable">$token</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">existsInDatabase</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token operator">-&gt;</span><span class="token function">claims</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;sub&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConstraintViolationException</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Token related to an unknown user&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">existsInDatabase</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$userId</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// ...</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5)),l("p",null,[n[17]||(n[17]=s("Then use it while ")),e(a,{to:"/usage/validating-tokens.html"},{default:t(()=>n[16]||(n[16]=[s("Validating tokens")])),_:1}),n[18]||(n[18]=s("."))])])}const v=i(u,[["render",d]]),b=JSON.parse('{"path":"/guides/extending-the-library.html","title":"Extending the library","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Builder","slug":"builder","link":"#builder","children":[]},{"level":2,"title":"Claims formatter","slug":"claims-formatter","link":"#claims-formatter","children":[]},{"level":2,"title":"Parser","slug":"parser","link":"#parser","children":[]},{"level":2,"title":"Signer","slug":"signer","link":"#signer","children":[]},{"level":2,"title":"Key","slug":"key","link":"#key","children":[]},{"level":2,"title":"Validator","slug":"validator","link":"#validator","children":[]},{"level":2,"title":"Validation constraints","slug":"validation-constraints","link":"#validation-constraints","children":[]}],"git":{"updatedTime":1744793100000,"contributors":[{"name":"jundayw","username":"jundayw","email":"jundayw@126.com","commits":3,"url":"https://github.com/jundayw"}],"changelog":[{"hash":"dd9303009a2d1e644a9c530f307b4786c8f83575","time":1744793100000,"email":"jundayw@126.com","author":"jundayw","message":"docs"},{"hash":"70e83125c0e7096ac999a4a400d3969c60395c10","time":1744726087000,"email":"jundayw@126.com","author":"jundayw","message":"docs"},{"hash":"91a3d6fc9010e5c1bda03335ef85a5b0a234ba4f","time":1744720143000,"email":"jundayw@126.com","author":"jundayw","message":"docs"}]},"filePathRelative":"guides/extending-the-library.md"}');export{v as comp,b as data};
