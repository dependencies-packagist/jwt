import{_ as s,c as a,a as t,o as p}from"./app-B9Ka1KbF.js";const e={};function o(c,n){return p(),a("div",null,n[0]||(n[0]=[t(`<h1 id="issuing-tokens" tabindex="-1"><a class="header-anchor" href="#issuing-tokens"><span>Issuing tokens</span></a></h1><p>To issue new tokens you must create a new token a builder:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Builder</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Encoding<span class="token punctuation">\\</span>ChainedFormatter</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Encoding<span class="token punctuation">\\</span>JoseEncoder</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Signature<span class="token punctuation">\\</span>Hmac<span class="token punctuation">\\</span>HS256</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Key</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$algorithm</span>  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HS256</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$signingKey</span> <span class="token operator">=</span> <span class="token class-name static-context">Key</span><span class="token operator">::</span><span class="token function">plainText</span><span class="token punctuation">(</span><span class="token function">random_bytes</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$now</span>     <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DateTimeImmutable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$builder</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Builder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JoseEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name static-context">ChainedFormatter</span><span class="token operator">::</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$token</span>   <span class="token operator">=</span> <span class="token variable">$builder</span></span>
<span class="line">    <span class="token comment">// Configures the issuer (iss claim)</span></span>
<span class="line">    <span class="token operator">-&gt;</span><span class="token function">issuedBy</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;http://example.com&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// Configures the audience (aud claim)</span></span>
<span class="line">    <span class="token operator">-&gt;</span><span class="token function">permittedFor</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;http://example.org&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// Configures the id (jti claim)</span></span>
<span class="line">    <span class="token operator">-&gt;</span><span class="token function">identifiedBy</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;4f1g23a12aa&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// Configures the time that the token was issue (iat claim)</span></span>
<span class="line">    <span class="token operator">-&gt;</span><span class="token function">issuedAt</span><span class="token punctuation">(</span><span class="token variable">$now</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// Configures the time that the token can be used (nbf claim)</span></span>
<span class="line">    <span class="token operator">-&gt;</span><span class="token function">canOnlyBeUsedAfter</span><span class="token punctuation">(</span><span class="token variable">$now</span><span class="token operator">-&gt;</span><span class="token function">modify</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;+1 minute&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// Configures the expiration time of the token (exp claim)</span></span>
<span class="line">    <span class="token operator">-&gt;</span><span class="token function">expiresAt</span><span class="token punctuation">(</span><span class="token variable">$now</span><span class="token operator">-&gt;</span><span class="token function">modify</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;+1 hour&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// Configures a new claim, called &quot;uid&quot;</span></span>
<span class="line">    <span class="token operator">-&gt;</span><span class="token function">withClaim</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;uid&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// Configures a new header, called &quot;foo&quot;</span></span>
<span class="line">    <span class="token operator">-&gt;</span><span class="token function">withHeader</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;bar&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// Builds a new token</span></span>
<span class="line">    <span class="token operator">-&gt;</span><span class="token function">getToken</span><span class="token punctuation">(</span><span class="token variable">$algorithm</span><span class="token punctuation">,</span> <span class="token variable">$signingKey</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token operator">-&gt;</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Once you&#39;ve created a token, you&#39;re able to retrieve its data and convert it to its string representation:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php"><pre><code><span class="line"><span class="token variable">$token</span> <span class="token operator">=</span> <span class="token variable">$builder</span></span>
<span class="line">    <span class="token operator">-&gt;</span><span class="token function">issuedBy</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;http://example.com&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">-&gt;</span><span class="token function">withClaim</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;uid&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">-&gt;</span><span class="token function">withHeader</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;bar&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">-&gt;</span><span class="token function">getToken</span><span class="token punctuation">(</span><span class="token variable">$algorithm</span><span class="token punctuation">,</span> <span class="token variable">$signingKey</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token operator">-&gt;</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Retrieves the token headers</span></span>
<span class="line"><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token operator">-&gt;</span><span class="token function">claims</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Retrieves the token claims</span></span>
<span class="line"></span>
<span class="line"><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token operator">-&gt;</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// will print &quot;bar&quot;</span></span>
<span class="line"><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token operator">-&gt;</span><span class="token function">claims</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;iss&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// will print &quot;http://example.com&quot;</span></span>
<span class="line"><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token operator">-&gt;</span><span class="token function">claims</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;uid&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// will print &quot;1&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token operator">-&gt;</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// The string representation of the object is a JWT string</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5)]))}const i=s(e,[["render",o]]),u=JSON.parse('{"path":"/usage/issuing-tokens.html","title":"Issuing tokens","lang":"en-US","frontmatter":{},"headers":[],"git":{"updatedTime":1744720143000,"contributors":[{"name":"jundayw","username":"jundayw","email":"jundayw@126.com","commits":1,"url":"https://github.com/jundayw"}],"changelog":[{"hash":"91a3d6fc9010e5c1bda03335ef85a5b0a234ba4f","time":1744720143000,"email":"jundayw@126.com","author":"jundayw","message":"docs"}]},"filePathRelative":"usage/issuing-tokens.md"}');export{i as comp,u as data};
