import{_ as e,c as d,a as o,o as r}from"./app-B9Ka1KbF.js";const a={};function i(n,t){return r(),d("div",null,t[0]||(t[0]=[o('<h1 id="supported-algorithms" tabindex="-1"><a class="header-anchor" href="#supported-algorithms"><span>Supported Algorithms</span></a></h1><p>This library supports signing and verifying tokens with both symmetric and asymmetric algorithms. Encryption is not yet supported.</p><p>Each algorithm will produce signature with different length. If you have constraints regarding the length of the issued tokens, choose the algorithms that generate shorter output (<code>HS256</code>, <code>RS256</code>, and <code>ES256</code>).</p><h2 id="symmetric-algorithms" tabindex="-1"><a class="header-anchor" href="#symmetric-algorithms"><span>Symmetric algorithms</span></a></h2><p>Symmetric algorithms perform signature creation and verification using the very same key/secret. They&#39;re usually recommended for scenarios where these operations are handled by the very same component.</p><table><thead><tr><th>Name</th><th>Description</th><th>Class</th><th>Key length req.</th></tr></thead><tbody><tr><td><code>HS256</code></td><td>HMAC using SHA-256</td><td><code>\\Token\\JWT\\Signature\\Hmac\\HS256</code></td><td><code>&gt;= 256 bits</code></td></tr><tr><td><code>HS384</code></td><td>HMAC using SHA-384</td><td><code>\\Token\\JWT\\Signature\\Hmac\\HS384</code></td><td><code>&gt;= 384 bits</code></td></tr><tr><td><code>HS512</code></td><td>HMAC using SHA-512</td><td><code>\\Token\\JWT\\Signature\\Hmac\\HS512</code></td><td><code>&gt;= 512 bits</code></td></tr></tbody></table><h2 id="asymmetric-algorithms" tabindex="-1"><a class="header-anchor" href="#asymmetric-algorithms"><span>Asymmetric algorithms</span></a></h2><p>Asymmetric algorithms perform signature creation with private/secret keys and verification with public keys. They&#39;re usually recommended for scenarios where creation is handled by a component and verification by many others.</p><table><thead><tr><th>Name</th><th>Description</th><th>Class</th><th>Key length req.</th></tr></thead><tbody><tr><td><code>ES256</code></td><td>ECDSA using P-256 and SHA-256</td><td><code>\\Token\\JWT\\Signature\\Ecdsa\\ES256</code></td><td><code>== 256 bits</code></td></tr><tr><td><code>ES384</code></td><td>ECDSA using P-384 and SHA-384</td><td><code>\\Token\\JWT\\Signature\\Ecdsa\\ES384</code></td><td><code>== 384 bits</code></td></tr><tr><td><code>ES512</code></td><td>ECDSA using P-521 and SHA-512</td><td><code>\\Token\\JWT\\Signature\\Ecdsa\\ES512</code></td><td><code>== 521 bits</code></td></tr><tr><td><code>RS256</code></td><td>RSASSA-PKCS1-v1_5 using SHA-256</td><td><code>\\Token\\JWT\\Signature\\Rsa\\RS256</code></td><td><code>&gt;= 2048 bits</code></td></tr><tr><td><code>RS384</code></td><td>RSASSA-PKCS1-v1_5 using SHA-384</td><td><code>\\Token\\JWT\\Signature\\Rsa\\RS384</code></td><td><code>&gt;= 2048 bits</code></td></tr><tr><td><code>RS512</code></td><td>RSASSA-PKCS1-v1_5 using SHA-512</td><td><code>\\Token\\JWT\\Signature\\Rsa\\RS512</code></td><td><code>&gt;= 2048 bits</code></td></tr><tr><td><code>EdDSA</code></td><td>EdDSA signature algorithms</td><td><code>\\Token\\JWT\\Signature\\Eddsa</code></td><td><code>&gt;= 256 bits</code></td></tr></tbody></table><h2 id="none-algorithm" tabindex="-1"><a class="header-anchor" href="#none-algorithm"><span><code>none</code> algorithm</span></a></h2><p>The <code>none</code> algorithm as described by <a href="https://www.iana.org/assignments/jose/jose.xhtml#web-signature-encryption-algorithms" target="_blank" rel="noopener noreferrer">JWT standard</a> is intentionally not implemented and not supported. The risk of misusing it is too high, and even where other means guarantee the token validity a symmetric algorithm shouldn&#39;t represent a computational bottleneck with modern hardware.</p>',11)]))}const c=e(a,[["render",i]]),h=JSON.parse('{"path":"/introduction/supported-algorithms.html","title":"Supported Algorithms","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Symmetric algorithms","slug":"symmetric-algorithms","link":"#symmetric-algorithms","children":[]},{"level":2,"title":"Asymmetric algorithms","slug":"asymmetric-algorithms","link":"#asymmetric-algorithms","children":[]},{"level":2,"title":"none algorithm","slug":"none-algorithm","link":"#none-algorithm","children":[]}],"git":{"updatedTime":1744722100000,"contributors":[{"name":"jundayw","username":"jundayw","email":"jundayw@126.com","commits":1,"url":"https://github.com/jundayw"}],"changelog":[{"hash":"becee0cfa39dcfe36fa0ba62a945435dc33913fc","time":1744722100000,"email":"jundayw@126.com","author":"jundayw","message":"docs:Supported Algorithms"}]},"filePathRelative":"introduction/supported-algorithms.md"}');export{c as comp,h as data};
