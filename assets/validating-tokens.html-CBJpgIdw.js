import{_ as o,c as l,b as a,a as c,d as s,e as t,w as e,r as i,o as u}from"./app-D4OUOdcg.js";const k={};function r(d,n){const p=i("RouteLink");return u(),l("div",null,[n[6]||(n[6]=a("h1",{id:"验证令牌",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#验证令牌"},[a("span",null,"验证令牌")])],-1)),a("p",null,[n[1]||(n[1]=s("要验证一个令牌，你必须创建一个新的验证器（使用 ")),t(p,{to:"/zh/usage/configuration.html"},{default:e(()=>n[0]||(n[0]=[s("配置对象")])),_:1}),n[2]||(n[2]=s(" 时更为方便），然后对该令牌进行断言或验证。"))]),n[7]||(n[7]=c(`<h2 id="使用-validator-assert" tabindex="-1"><a class="header-anchor" href="#使用-validator-assert"><span>使用 <code>Validator#assert()</code></span></a></h2><blockquote><p>警告 你必须 <strong>至少</strong> 提供一个验证约束，否则将抛出 <code>\\Token\\JWT\\Exceptions\\NoConstraintsException</code> 异常。</p></blockquote><p>该方法会遍历验证集合中的每一个约束，收集所有违反的项，并抛出一个包含所有验证错误的异常：</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Exceptions<span class="token punctuation">\\</span>RequiredConstraintsViolated</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Key</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Signature<span class="token punctuation">\\</span>None</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Token</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Validation<span class="token punctuation">\\</span>Constraint<span class="token punctuation">\\</span>IdentifiedBy</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Validation<span class="token punctuation">\\</span>Constraint<span class="token punctuation">\\</span>SignedWith</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$token</span> <span class="token operator">=</span> <span class="token class-name static-context">Token</span><span class="token operator">::</span><span class="token function">forSymmetricSigner</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">new</span> <span class="token class-name">None</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name static-context">Key</span><span class="token operator">::</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//$jwt = $token-&gt;builder()</span></span>
<span class="line"><span class="token comment">//    -&gt;identifiedBy(10000)</span></span>
<span class="line"><span class="token comment">//    -&gt;getToken($token-&gt;signer(), $token-&gt;signingKey())</span></span>
<span class="line"><span class="token comment">//    -&gt;toString();</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$plainToken</span> <span class="token operator">=</span> <span class="token variable">$token</span><span class="token operator">-&gt;</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token variable">$jwt</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$token</span><span class="token operator">-&gt;</span><span class="token function">setValidationConstraints</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">new</span> <span class="token class-name">SignedWith</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token operator">-&gt;</span><span class="token function">signer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$token</span><span class="token operator">-&gt;</span><span class="token function">signingKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">new</span> <span class="token class-name">IdentifiedBy</span><span class="token punctuation">(</span><span class="token number">10001</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$constraints</span> <span class="token operator">=</span> <span class="token variable">$token</span><span class="token operator">-&gt;</span><span class="token function">validationConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token variable">$token</span><span class="token operator">-&gt;</span><span class="token function">validator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token variable">$plainToken</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token variable">$constraints</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RequiredConstraintsViolated</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// list of constraints violation exceptions:</span></span>
<span class="line">    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$e</span><span class="token operator">-&gt;</span><span class="token function">violations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$plainToken</span><span class="token operator">-&gt;</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用-validator-validate" tabindex="-1"><a class="header-anchor" href="#使用-validator-validate"><span>使用 <code>Validator#validate()</code></span></a></h2><blockquote><p>警告 你必须 <strong>至少</strong> 提供一个验证约束，否则将抛出 <code>\\Token\\JWT\\Exceptions\\NoConstraintsException</code> 异常。</p></blockquote><p>不同之处在于我们将始终获得一个 <strong>布尔值</strong> 结果，并在遇到第一个违反约束时立即停止：</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Key</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Signature<span class="token punctuation">\\</span>Hmac<span class="token punctuation">\\</span>HS256</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Token</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Validation<span class="token punctuation">\\</span>Constraint<span class="token punctuation">\\</span>IdentifiedBy</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Validation<span class="token punctuation">\\</span>Constraint<span class="token punctuation">\\</span>SignedWith</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$algorithm</span>  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HS256</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$signingKey</span> <span class="token operator">=</span> <span class="token class-name static-context">Key</span><span class="token operator">::</span><span class="token function">plainText</span><span class="token punctuation">(</span><span class="token function">random_bytes</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$token</span> <span class="token operator">=</span> <span class="token class-name static-context">Token</span><span class="token operator">::</span><span class="token function">forSymmetricSigner</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token variable">$algorithm</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token variable">$signingKey</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$jwt</span> <span class="token operator">=</span> <span class="token variable">$token</span><span class="token operator">-&gt;</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">-&gt;</span><span class="token function">identifiedBy</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">-&gt;</span><span class="token function">getToken</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token operator">-&gt;</span><span class="token function">signer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$token</span><span class="token operator">-&gt;</span><span class="token function">signingKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">-&gt;</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$plainToken</span> <span class="token operator">=</span> <span class="token variable">$token</span><span class="token operator">-&gt;</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token variable">$jwt</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$token</span><span class="token operator">-&gt;</span><span class="token function">setValidationConstraints</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">new</span> <span class="token class-name">SignedWith</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token operator">-&gt;</span><span class="token function">signer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$token</span><span class="token operator">-&gt;</span><span class="token function">signingKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">new</span> <span class="token class-name">IdentifiedBy</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$constraints</span> <span class="token operator">=</span> <span class="token variable">$token</span><span class="token operator">-&gt;</span><span class="token function">validationConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$token</span><span class="token operator">-&gt;</span><span class="token function">validator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token variable">$plainToken</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token variable">$constraints</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;No way!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$plainToken</span><span class="token operator">-&gt;</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="可用的验证约束" tabindex="-1"><a class="header-anchor" href="#可用的验证约束"><span>可用的验证约束</span></a></h2><p>此库提供以下验证约束：</p><ul><li><code>Token\\JWT\\Validation\\Constraint\\IdentifiedBy</code>: 验证 <code>jti</code>（JWT ID）声明是否与期望值匹配</li><li><code>Token\\JWT\\Validation\\Constraint\\IssuedBy</code>: 验证 <code>iss</code>（签发者）声明是否在期望值列表中</li><li><code>Token\\JWT\\Validation\\Constraint\\PermittedFor</code>: 验证 <code>aud</code>（接收方）声明是否包含期望值</li><li><code>Token\\JWT\\Validation\\Constraint\\RelatedTo</code>: 验证 <code>sub</code>（主题）声明是否与期望值匹配</li><li><code>Token\\JWT\\Validation\\Constraint\\SignedWith</code>: 验证令牌是否使用预期的签名器和密钥进行签名</li><li><code>Token\\JWT\\Validation\\Constraint\\ValidAt</code>: 验证 <code>iat</code>（签发时间）、<code>nbf</code>（生效时间）和 <code>exp</code>（过期时间）声明（支持时间偏移配置）</li></ul>`,11)),a("p",null,[n[4]||(n[4]=s("你也可以")),t(p,{to:"/zh/guides/extending-the-library.html#%E9%AA%8C%E8%AF%81%E7%BA%A6%E6%9D%9F%E9%9B%86%E5%90%88"},{default:e(()=>n[3]||(n[3]=[s("自定义验证约束")])),_:1}),n[5]||(n[5]=s("。"))])])}const m=o(k,[["render",r]]),b=JSON.parse('{"path":"/zh/usage/validating-tokens.html","title":"验证令牌","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"使用 Validator#assert()","slug":"使用-validator-assert","link":"#使用-validator-assert","children":[]},{"level":2,"title":"使用 Validator#validate()","slug":"使用-validator-validate","link":"#使用-validator-validate","children":[]},{"level":2,"title":"可用的验证约束","slug":"可用的验证约束","link":"#可用的验证约束","children":[]}],"git":{"updatedTime":1744720143000,"contributors":[{"name":"jundayw","username":"jundayw","email":"jundayw@126.com","commits":1,"url":"https://github.com/jundayw"}],"changelog":[{"hash":"91a3d6fc9010e5c1bda03335ef85a5b0a234ba4f","time":1744720143000,"email":"jundayw@126.com","author":"jundayw","message":"docs"}]},"filePathRelative":"zh/usage/validating-tokens.md"}');export{m as comp,b as data};
