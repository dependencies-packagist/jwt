import{_ as o,c as i,b as a,a as c,d as s,e,w as p,r as l,o as u}from"./app-DtV7Qdmg.js";const r={};function k(d,n){const t=l("RouteLink");return u(),i("div",null,[n[6]||(n[6]=a("h1",{id:"validating-tokens",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#validating-tokens"},[a("span",null,"Validating tokens")])],-1)),a("p",null,[n[1]||(n[1]=s("To validate a token you must create a new validator (easier when using the ")),e(t,{to:"/usage/configuration.html"},{default:p(()=>n[0]||(n[0]=[s("Configuration")])),_:1}),n[2]||(n[2]=s(") and assert or validate a token."))]),n[7]||(n[7]=c(`<h2 id="using-validator-assert" tabindex="-1"><a class="header-anchor" href="#using-validator-assert"><span>Using <code>Validator#assert()</code></span></a></h2><blockquote><p>Warning You <strong>MUST</strong> provide at least one constraint, otherwise <code>\\Token\\JWT\\Exceptions\\NoConstraintsException</code> exception will be thrown.</p></blockquote><p>This method goes through every single constraint in the set, groups all the violations, and throws an exception with the grouped violations:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Exceptions<span class="token punctuation">\\</span>RequiredConstraintsViolated</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Key</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Signature<span class="token punctuation">\\</span>None</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Factory</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Validation<span class="token punctuation">\\</span>Constraint<span class="token punctuation">\\</span>IdentifiedBy</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Validation<span class="token punctuation">\\</span>Constraint<span class="token punctuation">\\</span>SignedWith</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$factory</span> <span class="token operator">=</span> <span class="token class-name static-context">Factory</span><span class="token operator">::</span><span class="token function">forSymmetricSigner</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">new</span> <span class="token class-name">None</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token class-name static-context">Key</span><span class="token operator">::</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//$jwt = $factory-&gt;builder()</span></span>
<span class="line"><span class="token comment">//    -&gt;identifiedBy(10000)</span></span>
<span class="line"><span class="token comment">//    -&gt;getToken($factory-&gt;signer(), $factory-&gt;signingKey())</span></span>
<span class="line"><span class="token comment">//    -&gt;toString();</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$token</span> <span class="token operator">=</span> <span class="token variable">$factory</span><span class="token operator">-&gt;</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token variable">$jwt</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$factory</span><span class="token operator">-&gt;</span><span class="token function">setValidationConstraints</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">new</span> <span class="token class-name">SignedWith</span><span class="token punctuation">(</span><span class="token variable">$factory</span><span class="token operator">-&gt;</span><span class="token function">signer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$factory</span><span class="token operator">-&gt;</span><span class="token function">signingKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">new</span> <span class="token class-name">IdentifiedBy</span><span class="token punctuation">(</span><span class="token number">10001</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$constraints</span> <span class="token operator">=</span> <span class="token variable">$factory</span><span class="token operator">-&gt;</span><span class="token function">validationConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token variable">$factory</span><span class="token operator">-&gt;</span><span class="token function">validator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token variable">$constraints</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RequiredConstraintsViolated</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// list of constraints violation exceptions:</span></span>
<span class="line">    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$e</span><span class="token operator">-&gt;</span><span class="token function">violations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token operator">-&gt;</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="using-validator-validate" tabindex="-1"><a class="header-anchor" href="#using-validator-validate"><span>Using <code>Validator#validate()</code></span></a></h2><blockquote><p>Warning You <strong>MUST</strong> provide at least one constraint, otherwise <code>\\Token\\JWT\\Exceptions\\NoConstraintsException</code> exception will be thrown.</p></blockquote><p>The difference here is that we&#39;ll always a get a <code>boolean</code> result and stop in the very first violation:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Key</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Signature<span class="token punctuation">\\</span>Hmac<span class="token punctuation">\\</span>HS256</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Factory</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Validation<span class="token punctuation">\\</span>Constraint<span class="token punctuation">\\</span>IdentifiedBy</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Token<span class="token punctuation">\\</span>JWT<span class="token punctuation">\\</span>Validation<span class="token punctuation">\\</span>Constraint<span class="token punctuation">\\</span>SignedWith</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$algorithm</span>  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HS256</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$signingKey</span> <span class="token operator">=</span> <span class="token class-name static-context">Key</span><span class="token operator">::</span><span class="token function">plainText</span><span class="token punctuation">(</span><span class="token function">random_bytes</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$factory</span> <span class="token operator">=</span> <span class="token class-name static-context">Factory</span><span class="token operator">::</span><span class="token function">forSymmetricSigner</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token variable">$algorithm</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token variable">$signingKey</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$jwt</span> <span class="token operator">=</span> <span class="token variable">$factory</span><span class="token operator">-&gt;</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">-&gt;</span><span class="token function">identifiedBy</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">-&gt;</span><span class="token function">getToken</span><span class="token punctuation">(</span><span class="token variable">$factory</span><span class="token operator">-&gt;</span><span class="token function">signer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$factory</span><span class="token operator">-&gt;</span><span class="token function">signingKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">-&gt;</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$token</span> <span class="token operator">=</span> <span class="token variable">$factory</span><span class="token operator">-&gt;</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token variable">$jwt</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$factory</span><span class="token operator">-&gt;</span><span class="token function">setValidationConstraints</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">new</span> <span class="token class-name">SignedWith</span><span class="token punctuation">(</span><span class="token variable">$factory</span><span class="token operator">-&gt;</span><span class="token function">signer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$factory</span><span class="token operator">-&gt;</span><span class="token function">signingKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">new</span> <span class="token class-name">IdentifiedBy</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$constraints</span> <span class="token operator">=</span> <span class="token variable">$factory</span><span class="token operator">-&gt;</span><span class="token function">validationConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$factory</span><span class="token operator">-&gt;</span><span class="token function">validator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token variable">$constraints</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;No way!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token operator">-&gt;</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="available-constraints" tabindex="-1"><a class="header-anchor" href="#available-constraints"><span>Available constraints</span></a></h2><p>This library provides the following constraints:</p><ul><li><code>Token\\JWT\\Validation\\Constraint\\IdentifiedBy</code>: verifies if the claim <code>jti</code> matches the expected value</li><li><code>Token\\JWT\\Validation\\Constraint\\IssuedBy</code>: verifies if the claim <code>iss</code> is listed as expected values</li><li><code>Token\\JWT\\Validation\\Constraint\\PermittedFor</code>: verifies if the claim <code>aud</code> contains the expected value</li><li><code>Token\\JWT\\Validation\\Constraint\\RelatedTo</code>: verifies if the claim <code>sub</code> matches the expected value</li><li><code>Token\\JWT\\Validation\\Constraint\\SignedWith</code>: verifies if the token was signed with the expected signer and key</li><li><code>Token\\JWT\\Validation\\Constraint\\ValidAt</code>: verifies the claims <code>iat</code>, <code>nbf</code>, and <code>exp</code> (supports leeway configuration)</li></ul>`,11)),a("p",null,[n[4]||(n[4]=s("You may also create your ")),e(t,{to:"/guides/extending-the-library.html#validation-constraints"},{default:p(()=>n[3]||(n[3]=[s("Validation constraints")])),_:1}),n[5]||(n[5]=s("."))])])}const m=o(r,[["render",k]]),b=JSON.parse('{"path":"/usage/validating-tokens.html","title":"Validating tokens","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Using Validator#assert()","slug":"using-validator-assert","link":"#using-validator-assert","children":[]},{"level":2,"title":"Using Validator#validate()","slug":"using-validator-validate","link":"#using-validator-validate","children":[]},{"level":2,"title":"Available constraints","slug":"available-constraints","link":"#available-constraints","children":[]}],"git":{"updatedTime":1744793100000,"contributors":[{"name":"jundayw","username":"jundayw","email":"jundayw@126.com","commits":3,"url":"https://github.com/jundayw"}],"changelog":[{"hash":"dd9303009a2d1e644a9c530f307b4786c8f83575","time":1744793100000,"email":"jundayw@126.com","author":"jundayw","message":"docs"},{"hash":"70e83125c0e7096ac999a4a400d3969c60395c10","time":1744726087000,"email":"jundayw@126.com","author":"jundayw","message":"docs"},{"hash":"91a3d6fc9010e5c1bda03335ef85a5b0a234ba4f","time":1744720143000,"email":"jundayw@126.com","author":"jundayw","message":"docs"}]},"filePathRelative":"usage/validating-tokens.md"}');export{m as comp,b as data};
